; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\shells\s5\pic_client\modexp.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_bn_bt
; Function compile flags: /Ogspy
;	COMDAT _bn_bt
_TEXT	SEGMENT
_x$ = 8							; size = 4
_bit$ = 12						; size = 4
_bn_bt	PROC						; COMDAT
; File c:\odzhan\shells\s5\pic_client\modexp.c
; Line 41
	mov	edx, DWORD PTR _bit$[esp-4]
	xor	eax, eax
	mov	ecx, edx
	and	ecx, 31					; 0000001fH
	inc	eax
	shl	eax, cl
	mov	ecx, DWORD PTR _x$[esp-4]
	shr	edx, 5
	and	eax, DWORD PTR [ecx+edx*4]
; Line 42
	ret	0
_bn_bt	ENDP
_TEXT	ENDS
PUBLIC	_bn_bits
; Function compile flags: /Ogspy
;	COMDAT _bn_bits
_TEXT	SEGMENT
_x$ = 8							; size = 4
_bn_bits PROC						; COMDAT
; Line 45
	push	esi
; Line 48
	mov	esi, 8191				; 00001fffH
$LL4@bn_bits:
; Line 49
	push	esi
	push	DWORD PTR _x$[esp+4]
	call	_bn_bt
	pop	ecx
	pop	ecx
	test	eax, eax
	jne	SHORT $LN8@bn_bits
; Line 48
	dec	esi
	jns	SHORT $LL4@bn_bits
$LN8@bn_bits:
; Line 51
	lea	eax, DWORD PTR [esi+1]
	pop	esi
; Line 52
	ret	0
_bn_bits ENDP
_TEXT	ENDS
PUBLIC	_bn_zero
; Function compile flags: /Ogspy
;	COMDAT _bn_zero
_TEXT	SEGMENT
_x$ = 8							; size = 4
_bn_zero PROC						; COMDAT
; Line 55
	push	edi
; Line 56
	mov	edi, DWORD PTR _x$[esp]
	xor	al, al
	mov	ecx, 1028				; 00000404H
	rep stosb
	pop	edi
; Line 57
	ret	0
_bn_zero ENDP
_TEXT	ENDS
PUBLIC	_bn_copy
; Function compile flags: /Ogspy
;	COMDAT _bn_copy
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_bn_copy PROC						; COMDAT
; Line 60
	push	esi
; Line 65
	mov	esi, DWORD PTR _s$[esp]
	push	edi
	mov	edi, DWORD PTR _d$[esp+4]
	mov	edx, 1028				; 00000404H
	xor	al, al
	mov	ecx, edx
	rep stosb
	mov	edi, DWORD PTR _d$[esp+4]
	mov	ecx, edx
	rep movsb
	pop	edi
	pop	esi
; Line 66
	ret	0
_bn_copy ENDP
_TEXT	ENDS
PUBLIC	_bn_add
; Function compile flags: /Ogspy
;	COMDAT _bn_add
_TEXT	SEGMENT
_t$ = -8204						; size = 8192
tv239 = -12						; size = 4
_cy$ = -8						; size = 4
tv137 = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_bn_add	PROC						; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 8204				; 0000200cH
; Line 70
	and	DWORD PTR _cy$[ebp], 0
	push	ebx
	push	esi
; Line 76
	mov	esi, DWORD PTR _a$[ebp]
	push	edi
	xor	al, al
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, 1028				; 00000404H
	rep stosb
	mov	ecx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR _t$[ebp]
	sub	esi, ecx
	sub	eax, ecx
	mov	DWORD PTR tv239[ebp], eax
	mov	DWORD PTR tv137[ebp], 256		; 00000100H
$LL3@bn_add:
; Line 79
	mov	eax, DWORD PTR [esi+ecx]
	xor	edx, edx
	xor	ebx, ebx
	add	eax, DWORD PTR [ecx]
	adc	edx, ebx
	xor	edi, edi
	add	eax, DWORD PTR _cy$[ebp]
	adc	edx, edi
; Line 81
	mov	edi, DWORD PTR tv239[ebp]
	mov	DWORD PTR [edi+ecx], eax
; Line 83
	xor	eax, eax
	test	edx, edx
	setne	al
	add	ecx, 4
	dec	DWORD PTR tv137[ebp]
	mov	DWORD PTR _cy$[ebp], eax
	jne	SHORT $LL3@bn_add
; Line 85
	mov	edi, DWORD PTR _r$[ebp]
	mov	edx, 1028				; 00000404H
	xor	al, al
	mov	ecx, edx
	rep stosb
	mov	edi, DWORD PTR _r$[ebp]
	lea	esi, DWORD PTR _t$[ebp]
	mov	ecx, edx
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 86
	leave
	ret	0
_bn_add	ENDP
_TEXT	ENDS
PUBLIC	_bn_sub
; Function compile flags: /Ogspy
;	COMDAT _bn_sub
_TEXT	SEGMENT
_t$ = -8200						; size = 8192
_x2$ = -8						; size = 4
tv82 = -4						; size = 4
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_bn_sub	PROC						; COMDAT
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 8200				; 00002008H
	push	ebx
	push	esi
; Line 95
	mov	esi, DWORD PTR _a$[ebp]
	push	edi
	xor	al, al
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, 1028				; 00000404H
	rep stosb
	mov	eax, DWORD PTR _b$[ebp]
	lea	edi, DWORD PTR _t$[ebp]
	xor	edx, edx
	sub	esi, eax
	sub	edi, eax
	mov	DWORD PTR tv82[ebp], 256		; 00000100H
$LL5@bn_sub:
; Line 97
	mov	ebx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+eax]
	mov	DWORD PTR _x2$[ebp], ebx
; Line 98
	test	edx, edx
	je	SHORT $LN2@bn_sub
; Line 99
	cmp	ebx, ecx
	sbb	edx, edx
; Line 100
	or	ebx, -1
	sub	ebx, DWORD PTR _x2$[ebp]
	inc	edx
	add	ecx, ebx
; Line 101
	jmp	SHORT $LN1@bn_sub
$LN2@bn_sub:
; Line 102
	cmp	ecx, ebx
	sbb	edx, edx
	neg	edx
; Line 103
	sub	ecx, ebx
$LN1@bn_sub:
; Line 105
	mov	DWORD PTR [edi+eax], ecx
	add	eax, 4
	dec	DWORD PTR tv82[ebp]
	jne	SHORT $LL5@bn_sub
; Line 107
	mov	edi, DWORD PTR _r$[ebp]
	mov	edx, 1028				; 00000404H
	xor	al, al
	mov	ecx, edx
	rep stosb
	mov	edi, DWORD PTR _r$[ebp]
	lea	esi, DWORD PTR _t$[ebp]
	mov	ecx, edx
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 108
	leave
	ret	0
_bn_sub	ENDP
_TEXT	ENDS
PUBLIC	_bn_cmp
; Function compile flags: /Ogspy
;	COMDAT _bn_cmp
_TEXT	SEGMENT
tv171 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_bn_cmp	PROC						; COMDAT
; Line 115
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 116
	mov	ecx, DWORD PTR _b$[ebp]
	push	ebx
	push	esi
	push	edi
; Line 118
	mov	edi, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv171[ebp], edi
	xor	eax, eax
	sub	DWORD PTR tv171[ebp], ecx
	mov	esi, 255				; 000000ffH
	lea	edx, DWORD PTR [ecx+1020]
$LL9@bn_cmp:
; Line 120
	mov	ebx, DWORD PTR tv171[ebp]
	mov	ebx, DWORD PTR [ebx+edx]
	cmp	ebx, DWORD PTR [edx]
	jne	SHORT $LN1@bn_cmp
; Line 118
	sub	edx, 4
	dec	esi
	jns	SHORT $LL9@bn_cmp
	jmp	SHORT $LN2@bn_cmp
$LN1@bn_cmp:
; Line 121
	mov	eax, esi
	mov	edx, DWORD PTR [edi+eax*4]
	cmp	DWORD PTR [ecx+eax*4], edx
	sbb	eax, eax
	and	eax, 2
	dec	eax
$LN2@bn_cmp:
	pop	edi
	pop	esi
	pop	ebx
; Line 125
	leave
	ret	0
_bn_cmp	ENDP
_TEXT	ENDS
PUBLIC	_bn_addmod
; Function compile flags: /Ogspy
;	COMDAT _bn_addmod
_TEXT	SEGMENT
_r$ = 8							; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_m$ = 20						; size = 4
_bn_addmod PROC						; COMDAT
; Line 130
	push	ebp
	mov	ebp, esp
	push	esi
; Line 131
	push	DWORD PTR _b$[ebp]
	mov	esi, DWORD PTR _r$[ebp]
	push	DWORD PTR _a$[ebp]
	push	esi
	call	_bn_add
; Line 133
	push	DWORD PTR _m$[ebp]
	push	esi
	call	_bn_cmp
	add	esp, 20					; 00000014H
	test	eax, eax
	js	SHORT $LN1@bn_addmod
; Line 135
	push	DWORD PTR _m$[ebp]
	push	esi
	push	esi
	call	_bn_sub
	add	esp, 12					; 0000000cH
$LN1@bn_addmod:
	pop	esi
; Line 137
	pop	ebp
	ret	0
_bn_addmod ENDP
_TEXT	ENDS
PUBLIC	_bn_mulmod
; Function compile flags: /Ogspy
;	COMDAT _bn_mulmod
_TEXT	SEGMENT
_r$ = -16388						; size = 8224
_t$ = -8196						; size = 8192
_bits$ = -4						; size = 4
_x$ = 8							; size = 4
_b$ = 12						; size = 4
_e$ = 16						; size = 4
_m$ = 20						; size = 4
_bn_mulmod PROC						; COMDAT
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 16388				; 00004004H
	push	ebx
	push	esi
	push	edi
; Line 141
	push	DWORD PTR _e$[ebp]
	call	_bn_bits
; Line 146
	mov	esi, DWORD PTR _b$[ebp]
	mov	ebx, 1028				; 00000404H
	mov	DWORD PTR _bits$[ebp], eax
	xor	al, al
	pop	ecx
	lea	edi, DWORD PTR _r$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep movsb
; Line 148
	xor	esi, esi
	cmp	DWORD PTR _bits$[ebp], esi
	jle	SHORT $LN2@bn_mulmod
$LL4@bn_mulmod:
; Line 149
	push	esi
	push	DWORD PTR _e$[ebp]
	call	_bn_bt
	pop	ecx
	pop	ecx
	test	eax, eax
	je	SHORT $LN1@bn_mulmod
; Line 150
	push	DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	eax
	call	_bn_addmod
	add	esp, 16					; 00000010H
$LN1@bn_mulmod:
; Line 152
	push	DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	push	eax
	push	eax
	call	_bn_addmod
	add	esp, 16					; 00000010H
	inc	esi
	cmp	esi, DWORD PTR _bits$[ebp]
	jl	SHORT $LL4@bn_mulmod
$LN2@bn_mulmod:
; Line 154
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, ebx
	xor	al, al
	rep stosb
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, ebx
	lea	esi, DWORD PTR _r$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 155
	leave
	ret	0
_bn_mulmod ENDP
_TEXT	ENDS
PUBLIC	_bn_expmod
; Function compile flags: /Ogspy
;	COMDAT _bn_expmod
_TEXT	SEGMENT
_r$ = -16388						; size = 8224
_t$ = -8196						; size = 8192
_bits$ = -4						; size = 4
_x$ = 8							; size = 4
_b$ = 12						; size = 4
_e$ = 16						; size = 4
_m$ = 20						; size = 4
_bn_expmod PROC						; COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 16388				; 00004004H
	push	ebx
	push	esi
	push	edi
; Line 159
	push	DWORD PTR _e$[ebp]
	call	_bn_bits
; Line 164
	mov	esi, DWORD PTR _b$[ebp]
	mov	ebx, 1028				; 00000404H
	mov	DWORD PTR _bits$[ebp], eax
	xor	al, al
	pop	ecx
	lea	edi, DWORD PTR _r$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep stosb
	lea	edi, DWORD PTR _t$[ebp]
	mov	ecx, ebx
	rep movsb
; Line 169
	xor	esi, esi
	mov	DWORD PTR _r$[ebp], 1
	cmp	DWORD PTR _bits$[ebp], esi
	jle	SHORT $LN2@bn_expmod
$LL4@bn_expmod:
; Line 171
	push	esi
	push	DWORD PTR _e$[ebp]
	call	_bn_bt
	pop	ecx
	pop	ecx
	test	eax, eax
	je	SHORT $LN1@bn_expmod
; Line 172
	push	DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	eax
	call	_bn_mulmod
	add	esp, 16					; 00000010H
$LN1@bn_expmod:
; Line 174
	push	DWORD PTR _m$[ebp]
	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	push	eax
	push	eax
	call	_bn_mulmod
	add	esp, 16					; 00000010H
	inc	esi
	cmp	esi, DWORD PTR _bits$[ebp]
	jl	SHORT $LL4@bn_expmod
$LN2@bn_expmod:
; Line 176
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, ebx
	xor	al, al
	rep stosb
	mov	edi, DWORD PTR _x$[ebp]
	mov	ecx, ebx
	lea	esi, DWORD PTR _r$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 177
	leave
	ret	0
_bn_expmod ENDP
_TEXT	ENDS
END
